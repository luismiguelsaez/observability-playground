---

nodeSelector: {}

server:
  global:
    # Required for Thanos sidecar and querier ( data deduplication )
    external_labels:
      replica: test
  remoteWrite:
    - url: thanos-receive.monitoring.svc.cluster.local:19291
  # Prometheus basic config for Thanos: https://thanos.io/tip/components/sidecar.md/#example-basic-deployment
  extraFlags:
    # Block duration set to 5m for testing purposes. For real environments, 2h is a good value
    - storage.tsdb.max-block-duration=5m
    - storage.tsdb.min-block-duration=5m
    # Enable web components for the sidecar to connect
    - web.enable-lifecycle
    - web.enable-admin-api
  # Thanos sidecar basic config: https://thanos.io/tip/components/sidecar.md/#example-basic-deployment
  sidecarContainers:
    thanos:
      image: quay.io/thanos/thanos:v0.31.0
      #image: bitnami/thanos:0.31.0
      args:
        - sidecar
        - --log.level=debug
        - --log.format=logfmt
        - --tsdb.path
        - /data
        - --prometheus.url
        - http://localhost:9090
        - --http-address
        - 0.0.0.0:19191
        - --grpc-address
        - 0.0.0.0:10901
        - --objstore.config-file
        - /config/objstore.yml
        #- "--objstore.config={type: S3, config: {bucket: prometheus-long-term}}"
      volumeMounts:
        - mountPath: /config
          name: bucket-s3
        # Same as Prometheus data volume mount and specified in --tsdb.path arg in this container
        - mountPath: /data
          name: storage-volume
      securityContext:
        runAsNonRoot: true
        # Same as Prometheus to be able to read data in /data path
        runAsUser: 65534
        runAsGroup: 65534
  extraVolumes:
    - name: bucket-s3
      secret:
        secretName: bucket-s3
  service:
    # Port of Thanos sidecar
    gRPC:
      enabled: true
      servicePort: 10901
